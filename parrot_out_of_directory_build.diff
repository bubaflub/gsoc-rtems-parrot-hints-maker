diff --git Configure.pl Configure.pl
index 76e3e67..364dd6d 100644
--- Configure.pl
+++ Configure.pl
@@ -6,9 +6,13 @@
 use 5.008;
 use strict;
 use warnings;
-use lib 'lib';
+use FindBin qw($Bin);
+use File::Spec;
+use lib File::Spec->catdir($Bin, "lib");
 
 use Parrot::Configure;
+use Cwd qw(realpath);
+use File::Basename;
 use Parrot::Configure::Options qw( process_options );
 use Parrot::Configure::Options::Test;
 use Parrot::Configure::Options::Test::Prepare qw(
@@ -63,13 +67,18 @@ $conf->add_steps( @{ $steps_list_ref } );
 
 # from Parrot::Configure::Data
 $conf->options->set( %{$args} );
+# handles out of directory builds
+my $source_dir = dirname(realpath($0));
+my $build_dir = $ENV{PWD};
+$conf->data->set(build_dir => $build_dir);
+$conf->data->set(source_dir => $source_dir);
 # save the command-line for make reconfig
 $conf->data->set(configure_args => @ARGV ? '"'.join("\" \"", map {qq($_)} @ARGV).'"'
                                          : '');
 
 # Log files created by Configure.pl in MANIFEST.configure.generated
 $conf->{active_configuration} = 1;
-unlink 'MANIFEST.configure.generated';
+unlink File::Spec->catfile($build_dir, 'MANIFEST.configure.generated');
 
 # Run the actual steps from Parrot::Configure
 $conf->runsteps or exit(1);
diff --git config/auto/pmc.pm config/auto/pmc.pm
index 59d2df8..8bb16d6 100644
--- config/auto/pmc.pm
+++ config/auto/pmc.pm
@@ -35,6 +35,8 @@ sub _init {
 
 sub runstep {
     my ( $self, $conf ) = @_;
+    my $build_dir = $conf->data->get('build_dir');
+    my $source_dir = $conf->data->get('source_dir');
 
     my @pmc = sort_pmcs( @{ $self->{srcpmc} } );
 
@@ -53,20 +55,20 @@ E_NOTE
 
     $TEMP_pmc_build .= <<END;
 PMC2C_FILES = \\
-    lib/Parrot/Pmc2c/Pmc2cMain.pm \\
-    lib/Parrot/Pmc2c/Parser.pm \\
-    lib/Parrot/Pmc2c/Dumper.pm \\
-    lib/Parrot/Pmc2c/PMC.pm \\
-    lib/Parrot/Pmc2c/Method.pm \\
-    lib/Parrot/Pmc2c/PCCMETHOD.pm \\
-    lib/Parrot/Pmc2c/MULTI.pm \\
-    lib/Parrot/Pmc2c/PMCEmitter.pm \\
-    lib/Parrot/Pmc2c/MethodEmitter.pm \\
-    lib/Parrot/Pmc2c/Library.pm \\
-    lib/Parrot/Pmc2c/UtilFunctions.pm \\
-    lib/Parrot/Pmc2c/PMC/default.pm \\
-    lib/Parrot/Pmc2c/PMC/Null.pm \\
-    lib/Parrot/Pmc2c/PMC/RO.pm
+    $source_dir/lib/Parrot/Pmc2c/Pmc2cMain.pm \\
+    $source_dir/lib/Parrot/Pmc2c/Parser.pm \\
+    $source_dir/lib/Parrot/Pmc2c/Dumper.pm \\
+    $source_dir/lib/Parrot/Pmc2c/PMC.pm \\
+    $source_dir/lib/Parrot/Pmc2c/Method.pm \\
+    $source_dir/lib/Parrot/Pmc2c/PCCMETHOD.pm \\
+    $source_dir/lib/Parrot/Pmc2c/MULTI.pm \\
+    $source_dir/lib/Parrot/Pmc2c/PMCEmitter.pm \\
+    $source_dir/lib/Parrot/Pmc2c/MethodEmitter.pm \\
+    $source_dir/lib/Parrot/Pmc2c/Library.pm \\
+    $source_dir/lib/Parrot/Pmc2c/UtilFunctions.pm \\
+    $source_dir/lib/Parrot/Pmc2c/PMC/default.pm \\
+    $source_dir/lib/Parrot/Pmc2c/PMC/Null.pm \\
+    $source_dir/lib/Parrot/Pmc2c/PMC/RO.pm
 END
 
     for my $pmc ( split( /\s+/, $pmc_list ) ) {
@@ -99,8 +101,8 @@ END
 src/pmc/$pmc.c : src/pmc/$pmc.dump
 \t\$(PMC2CC) src/pmc/$pmc.pmc
 
-src/pmc/$pmc.dump : vtable.dump $parent_dumps src/pmc/$pmc.pmc \$(PMC2C_FILES) $pccmethod_depend
-\t\$(PMC2CD) src/pmc/$pmc.pmc
+src/pmc/$pmc.dump : vtable.dump $parent_dumps $source_dir/src/pmc/$pmc.pmc \$(PMC2C_FILES) $source_dir/$pccmethod_depend
+\t\$(PMC2CD) $source_dir/src/pmc/$pmc.pmc
 
 include/pmc/pmc_$pmc.h: src/pmc/$pmc.c
 
diff --git config/gen/makefiles/root.in config/gen/makefiles/root.in
index 977b356..e3f3936 100644
--- config/gen/makefiles/root.in
+++ config/gen/makefiles/root.in
@@ -48,7 +48,7 @@ VERSION_DIR     = @versiondir@
 BUILD_DIR = @build_dir@
 
 # directory for build tools
-BUILD_TOOLS_DIR = tools/build
+BUILD_TOOLS_DIR = @source_dir@@slash@tools/build
 
 # directory for header files
 INC_DIR         = @inc@
@@ -120,14 +120,14 @@ HEADERIZER       = $(PERL) $(BUILD_TOOLS_DIR)/headerizer.pl
 
 include src/dynpmc/Defines.mak
 include src/dynoplibs/Defines.mak
-include compilers/imcc/Defines.mak
-include compilers/pirc/Defines.mak
-include compilers/tge/Defines.mak
-include compilers/pge/Defines.mak
-include compilers/pct/Defines.mak
-include compilers/opsc/Defines.mak
-include ext/nqp-rx/Defines.mak
-include compilers/data_json/Defines.mak
+include @source_dir@@slash@compilers/imcc/Defines.mak
+include @source_dir@@slash@compilers/pirc/Defines.mak
+include @source_dir@@slash@compilers/tge/Defines.mak
+include @source_dir@@slash@compilers/pge/Defines.mak
+include @source_dir@@slash@compilers/pct/Defines.mak
+include @source_dir@@slash@compilers/opsc/Defines.mak
+include @source_dir@@slash@ext/nqp-rx/Defines.mak
+include @source_dir@@slash@compilers/data_json/Defines.mak
 
 ###############################################################################
 #
@@ -712,7 +712,7 @@ PMC2CV = $(PERL) $(BUILD_TOOLS_DIR)/pmc2c.pl --vtable @no_lines_flag@
 .pmc.c : # suffix rule (limited support)
 	$(PMC2CC) $<
 
-vtable.dump : src/vtable.tbl lib/Parrot/Pmc2c/PCCMETHOD_BITS.pm
+vtable.dump : @source_dir@@slash@src/vtable.tbl lib/Parrot/Pmc2c/PCCMETHOD_BITS.pm
 	$(PMC2CV)
 
 # This is a listing of all targets meant to be called by users
@@ -1153,13 +1153,13 @@ runtime/parrot/include/iterator.pasm : $(INC_DIR)/enums.h $(H2INC)
 runtime/parrot/include/call_bits.pasm : $(INC_DIR)/enums.h $(H2INC)
 	$(PERL) $(H2INC) $(INC_DIR)/enums.h $@
 lib/Parrot/Pmc2c/PCCMETHOD_BITS.pm : $(INC_DIR)/enums.h $(H2INC)
-	$(PERL) $(H2INC) $(INC_DIR)/enums.h $@
+	$(PERL) $(H2INC) $(INC_DIR)/enums.h @build_dir@@slash@$@
 
 runtime/parrot/include/libpaths.pasm : $(INC_DIR)/library.h $(H2INC)
 	$(PERL) $(H2INC) $(INC_DIR)/library.h $@
 
 runtime/parrot/include/dlopenflags.pasm : $(INC_DIR)/platform_interface.h $(H2INC)
-	$(PERL) $(H2INC) $(INC_DIR)/platform_interface.h $@
+	$(PERL) $(H2INC) $(INC_DIR)/platform_interface.h @source_dir@@slash@$@
 
 runtime/parrot/include/datatypes.pasm : $(INC_DIR)/datatypes.h $(H2INC)
 	$(PERL) $(H2INC) $(INC_DIR)/datatypes.h $@
@@ -1302,7 +1302,7 @@ src/sub$(O) : $(PARROT_H_HEADERS) $(INC_DIR)/oplib/ops.h \
 	include/pmc/pmc_sub.h include/pmc/pmc_continuation.h
 
 src/string/api$(O) : $(PARROT_H_HEADERS) src/string/api.str \
-	src/string/private_cstring.h src/string/api.c
+	src/string/private_cstring.h @source_dir@@slash@src/string/api.c
 
 src/string/primitives$(O) : $(PARROT_H_HEADERS) src/string/primitives.c
 
@@ -1566,8 +1566,8 @@ src/ops/core_ops$(O) : src/ops/core_ops.c \
 # $(CONFIGURE_GENERATED_FILES) : Configure.pl
 #	$(PERL) Configure.pl
 
-$(INC_DIR)/vtable.h : src/vtable.tbl $(BUILD_TOOLS_DIR)/vtable_h.pl lib/Parrot/Vtable.pm
-	$(PERL) $(BUILD_TOOLS_DIR)/vtable_h.pl
+$(INC_DIR)/vtable.h : @source_dir@@slash@src/vtable.tbl $(BUILD_TOOLS_DIR)/vtable_h.pl @source_dir@@slash@lib/Parrot/Vtable.pm
+	$(PERL) $(BUILD_TOOLS_DIR)/vtable_h.pl @source_dir@@slash@src/vtable.tbl @build_dir@@slash@include/parrot/vtable.h
 
 ###############################################################################
 #
@@ -2556,15 +2556,15 @@ malloclist: src/core_pmcs.c
 
 include src/dynpmc/Rules.mak
 include src/dynoplibs/Rules.mak
-include runtime/parrot/library/Rules.mak
+include @source_dir@@slash@runtime/parrot/library/Rules.mak
 include compilers/imcc/Rules.mak
-include compilers/pirc/Rules.mak
-include compilers/pge/Rules.mak
-include compilers/pct/Rules.mak
-include compilers/opsc/Rules.mak
-include compilers/tge/Rules.mak
-include compilers/data_json/Rules.mak
-include ext/nqp-rx/Rules.mak
+include @source_dir@@slash@compilers/pirc/Rules.mak
+include @source_dir@@slash@compilers/pge/Rules.mak
+include @source_dir@@slash@compilers/pct/Rules.mak
+include @source_dir@@slash@compilers/opsc/Rules.mak
+include @source_dir@@slash@compilers/tge/Rules.mak
+include @source_dir@@slash@compilers/data_json/Rules.mak
+include @source_dir@@slash@ext/nqp-rx/Rules.mak
 
 # Local variables:
 #   mode: makefile
diff --git config/init/defaults.pm config/init/defaults.pm
index d833698..aa5f8f6 100644
--- config/init/defaults.pm
+++ config/init/defaults.pm
@@ -90,7 +90,7 @@ sub runstep {
         debugging => $conf->options->get('debugging') ? 1 : 0,
         optimize  => '',
         verbose   => $conf->options->get('verbose'),
-        build_dir => $build_dir,
+        # build_dir => $build_dir, # this is now set before this module runs
         configured_from_file =>
             $conf->options->get('configured_from_file') || '',
         configuration_steps => ( join q{ } => $conf->get_list_of_steps() ),
diff --git config/init/headers.pm config/init/headers.pm
index b7c0128..ae348af 100644
--- config/init/headers.pm
+++ config/init/headers.pm
@@ -16,6 +16,7 @@ package init::headers;
 
 use strict;
 use warnings;
+use File::Spec;
 
 
 use base qw(Parrot::Configure::Step);
@@ -34,7 +35,7 @@ sub _init {
 sub runstep {
     my ( $self, $conf ) = @_;
 
-    my $inc = 'include/parrot';
+    my $inc = File::Spec->catdir($conf->data->get('source_dir'), 'include/parrot');
 
     my @headers = (
         sort
diff --git config/init/hints.pm config/init/hints.pm
index c4ed805..28cc51b 100644
--- config/init/hints.pm
+++ config/init/hints.pm
@@ -40,7 +40,7 @@ sub runstep {
     $osname = 'linux' if ($osname eq 'gnukfreebsd');
 
     my $hints_file_name = $conf->options->get('hintsfile') || $osname ;
-    $hints_file = catfile('config', 'init', 'hints', "$hints_file_name.pm");
+    $hints_file = catfile($conf->data->get('source_dir'), 'config', 'init', 'hints', "$hints_file_name.pm");
 
     if ( -f $hints_file ) {
         my $hints_pkg = "init::hints::" . $hints_file_name;
diff --git config/init/manifest.pm config/init/manifest.pm
index e402cef..bae192e 100644
--- config/init/manifest.pm
+++ config/init/manifest.pm
@@ -21,6 +21,7 @@ use base qw(Parrot::Configure::Step);
 use Parrot::Configure::Step;
 use Parrot::Configure::Utils ':gen';
 use ExtUtils::Manifest qw(manicheck);
+use Cwd qw(chdir);
 
 
 sub _init {
@@ -40,7 +41,11 @@ sub runstep {
         return 1;
     }
 
+    chdir($conf->data->get('source_dir'));
     my @missing = ExtUtils::Manifest::manicheck();
+    # The following would avoid a chdir but doesn't work:
+    # $ExtUtils::Manifest::MANIFEST = File::Spec->catfile($conf->options->get('source_dir'), 'MANIFEST');
+    # my @missing = ExtUtils::Manifest::_check_files($conf->options->get('source_dir'));
 
     if (@missing) {
         print <<"END";
diff --git config/inter/progs.pm config/inter/progs.pm
index d0b3347..f70707c 100644
--- config/inter/progs.pm
+++ config/inter/progs.pm
@@ -21,6 +21,7 @@ use warnings;
 use base qw(Parrot::Configure::Step);
 
 use Parrot::Configure::Utils ':inter', ':auto';
+use File::Spec;
 
 
 sub _init {
@@ -159,8 +160,8 @@ sub _set_debug_and_warn {
 
 sub test_compiler {
     my ($conf, $cc) = @_;
-
-    open( my $out_fh, '>', "test_$$.c" )
+    my $build_dir = $conf->data->get('build_dir');
+    open( my $out_fh, '>', File::Spec->catfile($build_dir, "test_$$.c") )
         or die "Unable to open 'test_$$.c': $@\n";
     print {$out_fh} <<END_C;
 int main() {
diff --git lib/Parrot/BuildUtil.pm lib/Parrot/BuildUtil.pm
index f2dfb51..cd51844 100644
--- lib/Parrot/BuildUtil.pm
+++ lib/Parrot/BuildUtil.pm
@@ -40,17 +40,16 @@ sub parrot_version {
     if ( defined $parrot_version ) {
         return wantarray ? @parrot_version : $parrot_version;
     }
-
     # Obtain the official version number from the VERSION file.
-    if (-e 'VERSION') {
-        open my $VERSION, '<', 'VERSION' or die 'Could not open VERSION file!';
+    if (-e "VERSION") {
+        open my $VERSION, '<', "VERSION" or die "Could not open VERSION file!";
         chomp( $parrot_version = <$VERSION> );
         close $VERSION or die $!;
     }
     else { # we're in an installed copy of Parrot
         my $path = shift;
         $path = '' unless $path;
-        open my $VERSION, '<', "$path/VERSION" or die 'Could not open VERSION file!';
+        open my $VERSION, '<', "$path/VERSION" or die "Could not open $path/VERSION file!";
         chomp( $parrot_version = <$VERSION> );
         close $VERSION or die $!;
     }
diff --git lib/Parrot/Configure.pm lib/Parrot/Configure.pm
index 819bd23..3b20687 100644
--- lib/Parrot/Configure.pm
+++ lib/Parrot/Configure.pm
@@ -38,8 +38,9 @@ This module accepts no arguments to its C<import> method and exports no
 I<symbols>.
 
 =cut
-
-use lib qw(config);
+use FindBin qw($Bin);
+use File::Spec;
+use lib File::Spec->catdir($Bin, 'config');
 use Carp qw(carp);
 use Storable qw(2.12 nstore retrieve nfreeze thaw);
 use Parrot::Configure::Data;
@@ -375,6 +376,11 @@ sub _run_this_step {
 
     my $step_name   = $args->{task}->step;
 
+    my @dir = File::Spec->splitdir($Bin);
+    if ($dir[-2] eq 't') {
+        eval "use lib qw(" . File::Spec->catdir(@dir[0..$#dir - 2], 'config') . ");";
+    }
+
     eval "use $step_name;"; ## no critic (BuiltinFunctions::ProhibitStringyEval)
     die $@ if $@;
 
diff --git lib/Parrot/Configure/Compiler.pm lib/Parrot/Configure/Compiler.pm
index 8609775..0287886 100644
--- lib/Parrot/Configure/Compiler.pm
+++ lib/Parrot/Configure/Compiler.pm
@@ -25,7 +25,9 @@ use warnings;
 use base qw( Exporter );
 
 use Carp;
-use File::Spec;
+use File::Spec qw(catfile);
+use File::Basename qw(dirname);
+use File::Path qw(make_path);
 use lib ("lib");
 use Parrot::Configure::Utils qw(
     prompt copy_if_diff move_if_diff integrate
@@ -89,6 +91,7 @@ Calls the compiler and linker on F<test_$$.c>.
 sub cc_build {
     my $conf = shift;
     my ( $cc_args, $link_args ) = @_;
+    my $build_dir = $conf->data->get('build_dir');
 
     $cc_args   = '' unless defined $cc_args;
     $link_args = '' unless defined $link_args;
@@ -101,16 +104,21 @@ sub cc_build {
     # unique test file name for parallel builds
     my $test            = 'test_' . $$;
     my $compile_command = _build_compile_command( $cc, $ccflags, $cc_args );
-    my $compile_result  = _run_command( $compile_command, "$test.cco", "$test.cco", $verbose );
+    my $actual_file = File::Spec->catfile($build_dir, $test);
+    $compile_command =~ s/$test/$actual_file/;
+    $compile_command .= " $cc_exe_out$actual_file$o";
+    my $output = "$actual_file.cco";
+    my $compile_result  = _run_command( $compile_command, $output, $output, $verbose );
 
     if ($compile_result) {
-        confess "C compiler failed (see $test.cco)";
+        confess "C compiler failed (see $actual_file.cco)";
         return $compile_result;
     }
 
+    $output = "$actual_file.ldo";
     my $link_result =
-        _run_command( "$link $linkflags $test$o $link_args ${cc_exe_out}${test}${exe}  $libs",
-        "$test.ldo", "$test.ldo", $verbose )
+        _run_command( "$link $linkflags $actual_file$o $link_args ${cc_exe_out}${actual_file}${exe}  $libs",
+        $output, $output, $verbose )
         and confess "Linker failed (see $test.ldo)";
     if ($link_result) {
         return $link_result;
@@ -133,6 +141,7 @@ sub cc_run {
     my $verbose  = $conf->options->get('verbose');
     my $test     = 'test_' . $$;
     my $test_exe = ".${slash}${test}${exe}";
+    my $build_dir = $conf->data->get('build_dir');
 
     my $run_error;
     if ( defined( $_[0] ) && length( $_[0] ) ) {
@@ -140,10 +149,10 @@ sub cc_run {
         $run_error = _run_command( "$test_exe @_", "./$test.out", undef, $verbose );
     }
     else {
-        $run_error = _run_command( $test_exe, "./$test.out", undef, $verbose );
+        $run_error = _run_command( File::Spec->catfile($build_dir, $test_exe), File::Spec->catfile($build_dir, "$test.out"), undef, $verbose );
     }
 
-    my $output = _slurp("./$test.out");
+    my $output = _slurp(File::Spec->catfile($build_dir, "$test.out"));
 
     return $output;
 }
@@ -187,7 +196,8 @@ Cleans up all files in the root folder that match the glob F<test.*>.
 
 sub cc_clean {    ## no critic Subroutines::RequireFinalReturn
     my $conf = shift;
-    unlink map "test_${$}$_", qw( .c .cco .ldo .out ),
+    my $build_dir = $conf->data->get('build_dir');
+    unlink map File::Spec->catfile($build_dir, "test_${$}$_"), qw( .c .cco .ldo .out ),
         $conf->data->get(qw( o exe )),
         # MSVC
         qw( .exe.manifest .ilk .pdb );
@@ -333,6 +343,8 @@ syntax works ok.
 
 sub genfile {
     my $conf = shift;
+    my $source_dir = $conf->data->get('source_dir');
+    my $build_dir = $conf->data->get('build_dir');
     my ( $source, $target, %options ) = @_;
 
     my $calling_sub = (caller(1))[3] || q{};
@@ -340,8 +352,13 @@ sub genfile {
         $conf->append_configure_log($target);
     }
 
-    open my $in,  '<', $source       or die "Can't open $source: $!";
-    open my $out, '>', "$target.tmp" or die "Can't open $target.tmp: $!";
+    open my $in,  '<', ($source_dir ? File::Spec->catfile($source_dir,$source) : $source)       or die "Can't open $source: $!";
+    my $out_file = File::Spec->catfile($build_dir, "$target.tmp");
+    my $out_dir = dirname($out_file);
+    if (! -d $out_dir) {
+        make_path($out_dir);
+    }
+    open my $out, '>', ($build_dir ? File::Spec->catfile($build_dir, "$target.tmp") : "$target.tmp")   or die "Can't open $target.tmp: $!";
 
     if ( !exists $options{file_type}) {
         if ( $target =~ m/makefile$/i || $target =~ m/\.mak/) {
@@ -552,7 +569,7 @@ sub genfile {
     close($in)  or die "Can't close $source: $!";
     close($out) or die "Can't close $target: $!";
 
-    move_if_diff( "$target.tmp", $target, $options{ignore_pattern} );
+    move_if_diff( File::Spec->catfile($build_dir, "$target.tmp"), File::Spec->catfile($build_dir, $target), $options{ignore_pattern} );
 }
 
 # Return the next subexpression from the expression in $_[0]
@@ -673,8 +690,9 @@ sub cond_eval {
 sub append_configure_log {
     my $conf = shift;
     my $target = shift;
+    my $build_dir = $conf->data->get('build_dir');
     if ( $conf->{active_configuration} ) {
-        my $generated_log = 'MANIFEST.configure.generated';
+        my $generated_log = File::Spec->catfile($build_dir, 'MANIFEST.configure.generated');
         open my $GEN, '>>', $generated_log
             or die "Can't open $generated_log for appending: $!";
         print $GEN "$target\n";
diff --git lib/Parrot/Configure/Options/Conf.pm lib/Parrot/Configure/Options/Conf.pm
index c3a58f9..02328d0 100644
--- lib/Parrot/Configure/Options/Conf.pm
+++ lib/Parrot/Configure/Options/Conf.pm
@@ -17,7 +17,7 @@ use Parrot::BuildUtil ();
 use FindBin qw($Bin);
 
 our $script         = q{Configure.pl};
-our $parrot_version = Parrot::BuildUtil::parrot_version("$Bin/../../");
+our $parrot_version = Parrot::BuildUtil::parrot_version($Bin);
 our $svnid          = '$Id$';
 
 sub print_version {
diff --git lib/Parrot/Configure/Options/Test/Prepare.pm lib/Parrot/Configure/Options/Test/Prepare.pm
index 7f73011..7107b1d 100644
--- lib/Parrot/Configure/Options/Test/Prepare.pm
+++ lib/Parrot/Configure/Options/Test/Prepare.pm
@@ -6,6 +6,8 @@ use warnings;
 use Carp;
 use Data::Dumper;$Data::Dumper::Indent=1;
 use File::Find;
+use FindBin qw($Bin);
+use File::Spec;
 #use Scalar::Util qw( looks_like_number );
 use base qw( Exporter );
 our @EXPORT_OK = qw(
@@ -14,11 +16,15 @@ our @EXPORT_OK = qw(
 );
 use lib qw(lib);
 use Parrot::Configure::Step::List qw( get_steps_list );
-
-my $config_dir = q{t/configure};
+my $path = $Bin;
+my @dirs = File::Spec->splitdir($path);
+if ($dirs[-2] eq 't' && $dirs[-1] eq 'configure') {
+  $path = '.';
+}
+my $config_dir = File::Spec->catdir($path, 't', 'configure');
 my @framework_tests = _get_framework_tests($config_dir);
 
-my $steps_dir = q{t/steps};
+my $steps_dir = File::Spec->catdir($path, 't', 'steps');
 my ( $steps_tests_simple_ref, $steps_tests_complex_ref )  =
     _find_steps_tests($steps_dir);
 my @steps_expected = get_steps_list();
@@ -35,8 +41,8 @@ sub get_preconfiguration_tests {
 sub get_postconfiguration_tests {
     my @postconfiguration_tests = (
         @steps_tests,
-        glob("t/postconfigure/*.t"),
-        glob("t/pharness/*.t"),
+        glob(File::Spec->catfile($path, 't', 'postconfigure', '*.t')),
+        glob(File::Spec->catfile($path, 't', 'pharness', '*.t')),
     );
     return @postconfiguration_tests;
 };
diff --git lib/Parrot/H2inc.pm lib/Parrot/H2inc.pm
index 8347320..819d4f9 100644
--- lib/Parrot/H2inc.pm
+++ lib/Parrot/H2inc.pm
@@ -5,6 +5,8 @@ package Parrot::H2inc;
 use strict;
 use warnings;
 use Exporter;
+use File::Basename qw(dirname);
+use File::Path qw(make_path);
 our @ISA = qw( Exporter );
 our @EXPORT_OK = qw(
     parse_file
@@ -47,6 +49,10 @@ sub parse_file {
     $out_file =~ s{\\}{/}g; # transform Windows backslash
 
     my ( %values, $last_val, $cur, $or_continues );
+    my $out_dir = dirname($out_file);
+    if (! -d $out_dir) {
+        make_path($out_dir);
+    }
     open my $fh, '<', $in_file or die "Can't open $in_file: $!\n";
     while ( my $line = <$fh> ) {
         if (
diff --git tools/build/h2inc.pl tools/build/h2inc.pl
index 0c1ec42..f2f1bf8 100644
--- tools/build/h2inc.pl
+++ tools/build/h2inc.pl
@@ -19,7 +19,9 @@ Invoked by F<make>.  Imports functions from Parrot::H2inc.
 
 use strict;
 use warnings;
-use lib qw( lib );
+use File::Spec;
+use FindBin qw($Bin);
+use lib File::Spec->catfile($Bin, '..', '..', 'lib' );
 use Parrot::H2inc qw(
     parse_file
     perform_directive
diff --git tools/build/vtable_h.pl tools/build/vtable_h.pl
index 13048c4..45bf8f8 100644
--- tools/build/vtable_h.pl
+++ tools/build/vtable_h.pl
@@ -8,7 +8,7 @@ tools/build/vtable_h.pl - Create the vtable header
 
 =head1 SYNOPSIS
 
- % perl tools/build/vtable_h.pl
+ % perl tools/build/vtable_h.pl <input_file> <output_file>
 
 =head1 DESCRIPTION
 
@@ -27,13 +27,26 @@ uses C<Parrot::Vtable>.
 
 use strict;
 use warnings;
-
-use lib 'lib';
+use File::Spec;
+use FindBin qw($Bin);
+use lib File::Spec->catfile($Bin, '..', '..', 'lib');
+use File::Basename qw(dirname);
+use File::Path qw(make_path);
 use Parrot::Vtable;
 
-my $vtable = parse_vtable();
+my $usage = "Usage: $0 <input_file> <output_file>\n";
+
+die $usage unless @ARGV == 2;
+my ($in_file, $out_file) = @ARGV;
+
+my $vtable = parse_vtable($in_file);
+
+my $out_dir = dirname($out_file);
+if (! -d $out_dir) {
+    make_path($out_dir);
+}
 
-open my $OUT, '>', 'include/parrot/vtable.h' or die $!;
+open my $OUT, '>', $out_file or die $!;
 
 print $OUT <<'EOF';
 /* ex: set ro:
